{"code":"import { getSendUrl, getUA, isValidListener } from \".\";\r\n/**\r\n * 事件发射器\r\n * @param this\r\n */\r\nexport var EventEmitter = function () {\r\n    this._events = {};\r\n};\r\nEventEmitter.prototype.on = function (eventName, listener) {\r\n    if (!eventName || !listener)\r\n        return false;\r\n    if (!isValidListener(listener)) {\r\n        throw new Error('listener must be a function');\r\n    }\r\n    this._events[eventName] = this._events[eventName] || [];\r\n    var listenerIsWrapped = typeof listener === 'object';\r\n    this._events[eventName].push(listenerIsWrapped\r\n        ? listener\r\n        : {\r\n            listener: listener,\r\n            once: false,\r\n        });\r\n    return this;\r\n};\r\nEventEmitter.prototype.prepend = function (eventName, listener) {\r\n    if (!eventName || !listener)\r\n        return false;\r\n    if (!isValidListener(listener)) {\r\n        throw new Error('listener must be a function');\r\n    }\r\n    this._events[eventName] = this._events[eventName] || [];\r\n    var listenerIsWrapped = typeof listener === 'object';\r\n    this._events[eventName].unshift(listenerIsWrapped\r\n        ? listener\r\n        : {\r\n            listener: listener,\r\n            once: false,\r\n        });\r\n    return this;\r\n};\r\nEventEmitter.prototype.once = function (eventName, listener) {\r\n    return this.on(eventName, {\r\n        listener: listener,\r\n        once: true,\r\n    });\r\n};\r\nEventEmitter.prototype.off = function (eventName, listener) {\r\n    var listeners = this._events[eventName];\r\n    if (!listeners)\r\n        return false;\r\n    if (typeof listener === 'number') {\r\n        listeners.splice(listener, 1);\r\n    }\r\n    else if (typeof listener === 'function') {\r\n        for (var i = 0, len = listeners.length; i < len; i++) {\r\n            if (listeners[i] && listeners[i].listener === listener) {\r\n                listeners.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\nEventEmitter.prototype.emit = function (eventName, args) {\r\n    var listeners = this._events[eventName];\r\n    if (!listeners)\r\n        return false;\r\n    for (var i = 0; i < listeners.length; i++) {\r\n        var listener = listeners[i];\r\n        if (listener) {\r\n            listener.listener.call(this, args || {});\r\n            if (listener.once) {\r\n                this.off(eventName, i);\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\nEventEmitter.prototype.removeAllListeners = function (eventName) {\r\n    if (eventName && this._events[eventName]) {\r\n        this._events[eventName] = [];\r\n    }\r\n    else {\r\n        this._events = {};\r\n    }\r\n};\r\nEventEmitter.prototype.listeners = function (eventName) {\r\n    if (eventName && typeof eventName === 'string') {\r\n        return this._events[eventName];\r\n    }\r\n    else {\r\n        return this._events;\r\n    }\r\n};\r\n/**\r\n * 图片标签设置\r\n * @param this\r\n * @param sa\r\n * @param para\r\n */\r\nexport var ImageSender = function (sa, para) {\r\n    this.callback = para.callback;\r\n    this.img = document.createElement('img');\r\n    this.img.width = 1;\r\n    this.img.height = 1;\r\n    this.sa = sa;\r\n    if (sa === null || sa === void 0 ? void 0 : sa.img_use_crossorigin) {\r\n        this.img.crossOrigin = 'anonymous';\r\n    }\r\n    var org = sa.org;\r\n    var project = sa.project;\r\n    var token = sa.token;\r\n    this.server_url = getSendUrl(sa.server_url, para, { org: org, project: project, token: token });\r\n};\r\nImageSender.prototype.start = function () {\r\n    var me = this;\r\n    if (me.sa.ignore_oom) {\r\n        this.img.onload = function () {\r\n            this.onload = null;\r\n            this.onerror = null;\r\n            this.onabort = null;\r\n            me.isEnd();\r\n        };\r\n        this.img.onerror = function () {\r\n            this.onload = null;\r\n            this.onerror = null;\r\n            this.onabort = null;\r\n            me.isEnd();\r\n        };\r\n        this.img.onabort = function () {\r\n            this.onload = null;\r\n            this.onerror = null;\r\n            this.onabort = null;\r\n            me.isEnd();\r\n        };\r\n    }\r\n    this.img.src = this.server_url;\r\n};\r\nImageSender.prototype.lastClear = function () {\r\n    var sys = getUA();\r\n    if (sys.ie !== undefined) {\r\n        this.img.src = 'about:blank';\r\n    }\r\n    else {\r\n        this.img.src = '';\r\n    }\r\n};\r\n","references":["/Users/vannvan/Documents/vannvan@github/monorepo-explore/packages/sensors/src/utils/index.ts"],"dts":{"name":"/Users/vannvan/Documents/vannvan@github/monorepo-explore/packages/sensors/dist/types/utils/saEvent.d.ts","writeByteOrderMark":false,"text":"/**\r\n * 事件发射器\r\n * @param this\r\n */\r\nexport declare const EventEmitter: any;\r\n/**\r\n * 图片标签设置\r\n * @param this\r\n * @param sa\r\n * @param para\r\n */\r\nexport declare const ImageSender: any;\r\n"}}
